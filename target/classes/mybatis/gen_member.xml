<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- dev.mvc.team4.genmemberDAOInter 패키지에 등록된 interface 명시,
      패키지명과 인터페이스명은 실제로 존재해야함,
      Spring이 내부적으로 자동으로 interface를 구현해줌. -->
<mapper namespace="dev.mvc.genmember.GenmemberDAOInter">
  <!-- 
  insert: INSERT SQL 실행
  id: Spring에서 호출시 사용
  parameterType: 전달받는 데이터 객체의 타입
  return: 등록한 레코드 갯수 리턴
  SQL선언시 ';'은 삭제
  #{}: ? 동일
  #{name}: public String getName() 자동 호출
   --> 
  <insert id="create" parameterType="GenmemberVO">
    insert into gen_member(gen_memberno, gen_id, gen_passwd, gen_name, gen_resident, gen_sex, gen_phone, gen_zipcode, gen_addr, gen_addr1, gen_mail, gen_date)
    values(gen_member_seq.nextval, #{gen_id}, #{gen_passwd}, #{gen_name}, #{gen_resident}, #{gen_sex}, #{gen_phone}, #{gen_zipcode}, #{gen_addr}, #{gen_addr1}, #{gen_mail}, sysdate)
  </insert> 
  
  <!-- 
  레코드 갯수 만큼 genmemberVO 객체를 만들어 ArrayList에 저장하여 리턴,
  List<genmemberVO> list = new ArrayList<genmemberVO>(); 
  -->
  <select id="list_memberno_asc" resultType="GenmemberVO">
    SELECT gen_memberno, gen_id, gen_passwd, gen_name, gen_resident, gen_sex, gen_phone, gen_addr ,gen_mail, gen_date
    FROM gen_member
    ORDER BY gen_memberno ASC
  </select>
  
  <!-- 조회 id: read, 입력: gen_memberno, 리턴: GenmemberVO -->
  <select id="read" parameterType="int" resultType="GenmemberVO">
    SELECT gen_memberno, gen_id, gen_passwd, gen_name, gen_resident, gen_sex, gen_phone, gen_zipcode, gen_addr, gen_addr1,gen_mail, gen_date
    FROM gen_member
    WHERE gen_memberno = #{gen_memberno}
  </select>
  
  <!-- 수정, id: update, 입력: GenmemberVO, 리턴: int -->
  <update id="update" parameterType="GenmemberVO">
    UPDATE gen_member
    SET gen_name=#{gen_name}, gen_resident=#{gen_resident}, gen_sex=#{gen_sex}, gen_phone=#{gen_phone}, gen_zipcode=#{gen_zipcode}, gen_addr=#{gen_addr}, gen_addr1=#{gen_addr1}, gen_mail=#{gen_mail}
    WHERE gen_memberno = #{gen_memberno}
  </update>
  
  <!-- 삭제,id: delete 입력:int 리턴:int -->
  <delete id="delete" parameterType="int">
    DELETE FROM gen_member
    WHERE gen_memberno =#{gen_memberno}
  </delete>
  
  <!-- id 중복 검사 -->
  <select id="id_check" parameterType="String" resultType="int">
    SELECT COUNT(*) as id_cnt
    FROM gen_member
    WHERE gen_id=#{gen_id}
  </select>
  
  <!-- 패스워드 검사 -->
  <select id="passwd_check" parameterType="HashMap" resultType="int">
   SELECT COUNT(*) as passwd_cnt
   FROM gen_member
   WHERE gen_memberno=#{gen_memberno} AND gen_passwd=#{gen_passwd}
  </select>
  
  <!-- 비밀번호 변경 -->
  <update id="update_passwd" parameterType="GenmemberVO">
   UPDATE gen_member
   SET gen_passwd=#{gen_passwd}
   WHERE gen_memberno = #{gen_memberno}
  </update>
  
  <!-- 로그인 -->
  <select id="login" resultType="int" parameterType="Map">
    SELECT COUNT(*) as cnt
    FROM gen_member
    WHERE gen_id=#{gen_id} AND gen_passwd=#{gen_passwd}
  </select>
  
  <!-- 회원 정보 조회 -->
  <select id="readById" parameterType="String" resultType="GenmemberVO">
    SELECT gen_memberno, gen_id, gen_passwd, gen_name, gen_resident, gen_sex, gen_phone, gen_zipcode, gen_addr, gen_addr1, gen_mail, gen_date
    FROM gen_member
    WHERE gen_id = #{gen_id}
  </select>

  
</mapper>





